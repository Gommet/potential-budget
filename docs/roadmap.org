#+title: Roadmap
This document contains the roadmap that the project will have, along with the necessary images, documentation, and things to make the development a breeze.

* PROJ Unit tests for widgets
The widgets that I have developed untill now don't have tests on them. It would be better if the project had a better unit tests, as it makes the program more robust to change things arround, which I must say that I am inclined to do it on a weekly basis.

** TODO Automating running tests + code coverage in GitHub
The first thing is to guarantee that the tests are run. I feel that most programmers forget to do it.

** TODO Code coverage arround 90%
It's not good to define a good code coverage, but I feel like getting around a 90% should be a priority.

* PROJ Database
I want to make a database so that the application is offline. After all, what motivated me to do the application was when I travell have my exenses annotated. It would be weird if I need internet, when most of the time I don't have it. Maybe syncronizing later with a shared database / backend, but who knows?

** Class diagram
#+begin_src plantuml :file img/db.png :dir .
!theme reddress-darkblue
class Budget {
        + budgetId: Integer
        + budget : Real
        + description : Text
        + day: Integer
        + tag : Integer
}

class Tag {
        + tagId: Integer
        + tagColor : Integer
        + tagName : TextUnique
}

class Exchange {
        + exhangeId: Integer
        + name: Text
        + conversion: Real
        + symbol: Text
}

class AssociatedWord{
        + wordId: Integer
        + word: Text Unique
        + tag : Integer
}

Budget "*" *- "1" Tag
Tag "1" -- "*" AssociatedWord

#+end_src

#+RESULTS:
[[file:img/db.png]]

*** Description
+ Budget :: Holds an expense that has been done. It holds 4 values:
  + budget :: the expense
  + description :: A small description to know what is about
  + day :: the day of the expense
  + tag :: tag associated
+ Tag :: Contains the tag that will be grouped for the expenses
+ Exchange :: As it is for travelling, it is cool to have a conversion between the different values, as if you want to support more than one currency.
+ AssociatedWord :: When using the command pallette, i will be using frequently words like "dinner", or "launch", so having an associatedWord that automatically pushes the tag will be better.






  

** TODO Define Service for database

** DB Scheme
#+begin_src sqlite
CREATE TABLE Tag(tagId Integer Primary Key, tagColor Integer, tagName Text Unique) STRICT;

CREATE TABLE Budget(budgetId Integer Primary Key, budget Real, description Text, day Integer, tagId Integer, Foreign Key(tagId) References TAG(tagId)) STRICT;

CREATE TABLE AssociatedWord(wordId Integer Primary Key, word Text Unique, tag Integer, Foreign Key(tag) References Tag(tagId)) Strict;

CREATE TABLE Exchange(exchangeId Integer Primary Key, name Text, conversion Real, symbol Text) Strict;

#+end_src

** Migrating from sqflite
So sqflite is what is expected to use for data persistance. The problem is that it does not go well with tests. On the other hand, ~drift~ is another library that can be tested in local tests. As this is a goal to have, I will start using ~drift~ instead of ~sqflite~. Note that in my personal opionion, this sucks, as I already started learning sqflite, and learning sqflite was easier as it is an SQL language.
* PROJ Command Pallette
Although the application is fine, I feel like sometimes I need a faster way to put the expenses quickly.

Developing a command pallete that I can click and fill it quickly could become a better experience for the end user. This project defines how the Command Pallette should be defined, and how it will be implemented.

** Commands
Commands are described as:
1. An Array/Tree containing all the possible commands. Maybe a tree will be better, but I feel like it is faster this way to program, and easier to create more commands.

   1. The set of the tree must be unique. That is ~list(set(commands)) == commands~

   2. Example
      #+begin_src dot :file img/command-example.png
digraph G {
        node [shape=none];
        "*" -> tag -> "<color>" -> "<tagName>";
        "*" -> "push" -> "<number>" -> "<exp?>" -> "<currency>" -> "<desc>"
        "*" -> "..."
        }
      #+end_src

      #+RESULTS:
      [[file:img/command-example.png]]

   3. Pattern:
      Should be filled exactly. This is just so that you are able to tell which command to execute next.

   4. <pattern>
      Should be filled with a type of pattern. Although the classes will be defined more accordingly later, this pattern should contain a flew methods, as to evalute if the expression is correct, and change the state accordingly when this happens. If not, provide an error.

2. Suggestions:
   So I want each step to be able to give suggestions about how it should be filled, as it makes the parsing easier, and the user experience seems better. For example, at first it should be able to tell which commands are available, and order them for their usage / how I feel it should be order.

   I think the suggestions should be a Widget to be defined in the step, as a tag should have a color associated, and other steps will need different values. The priority is that the Command can be used as a package perse, as I will be using it for a few projects, so a little bit of overengineering should be better in the long run.

3. Validator
   When a space is hit things should happen:
   1. The input is validated:
      + if the input is bad, an error message pops up and the space is removed
      + if the input is correct, the state is updated so it holds the informaion about the command, and the new suggestions are shown using the context (as it may change given the current state.)
   2. If after the validation there is an end step, a series of steps are executed to ensure that the database is done.

** TODO Class diagram
I should do the class diagram, but it seems rather difficult, so I will try to do it after I finish the Database.
